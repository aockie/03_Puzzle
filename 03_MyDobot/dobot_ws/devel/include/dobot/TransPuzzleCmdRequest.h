// Generated by gencpp from file dobot/TransPuzzleCmdRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_TRANSPUZZLECMDREQUEST_H
#define DOBOT_MESSAGE_TRANSPUZZLECMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct TransPuzzleCmdRequest_
{
  typedef TransPuzzleCmdRequest_<ContainerAllocator> Type;

  TransPuzzleCmdRequest_()
    : src_x(0.0)
    , src_y(0.0)
    , dst_x(0.0)
    , dst_y(0.0)  {
    }
  TransPuzzleCmdRequest_(const ContainerAllocator& _alloc)
    : src_x(0.0)
    , src_y(0.0)
    , dst_x(0.0)
    , dst_y(0.0)  {
  (void)_alloc;
    }



   typedef float _src_x_type;
  _src_x_type src_x;

   typedef float _src_y_type;
  _src_y_type src_y;

   typedef float _dst_x_type;
  _dst_x_type dst_x;

   typedef float _dst_y_type;
  _dst_y_type dst_y;




  typedef boost::shared_ptr< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TransPuzzleCmdRequest_

typedef ::dobot::TransPuzzleCmdRequest_<std::allocator<void> > TransPuzzleCmdRequest;

typedef boost::shared_ptr< ::dobot::TransPuzzleCmdRequest > TransPuzzleCmdRequestPtr;
typedef boost::shared_ptr< ::dobot::TransPuzzleCmdRequest const> TransPuzzleCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dobot': ['/home/waida/MyDobot/dobot_ws/src/dobot/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f3206cd72d7e1677e9cd0b316eda50b";
  }

  static const char* value(const ::dobot::TransPuzzleCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f3206cd72d7e167ULL;
  static const uint64_t static_value2 = 0x7e9cd0b316eda50bULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/TransPuzzleCmdRequest";
  }

  static const char* value(const ::dobot::TransPuzzleCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 src_x\n\
float32 src_y\n\
float32 dst_x\n\
float32 dst_y\n\
";
  }

  static const char* value(const ::dobot::TransPuzzleCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_x);
      stream.next(m.src_y);
      stream.next(m.dst_x);
      stream.next(m.dst_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransPuzzleCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::TransPuzzleCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::TransPuzzleCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "src_x: ";
    Printer<float>::stream(s, indent + "  ", v.src_x);
    s << indent << "src_y: ";
    Printer<float>::stream(s, indent + "  ", v.src_y);
    s << indent << "dst_x: ";
    Printer<float>::stream(s, indent + "  ", v.dst_x);
    s << indent << "dst_y: ";
    Printer<float>::stream(s, indent + "  ", v.dst_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_TRANSPUZZLECMDREQUEST_H
